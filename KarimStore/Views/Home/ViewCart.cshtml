@model IEnumerable<KarimStore.Models.Cart>

@{

    ViewBag.Title = "ViewCart";
    float Total = 0;
    List<int> ProductIDs = new List<int>();
    List<int> Quants = new List<int>();
}
<style>
    .MyTotal {
        text-align: right;
        margin-right: 100px;
        font-weight: bolder;
        font-family: 'DejaVu Math TeX Gyre';
    }

    .MyFont {
        font-family: 'DejaVu Math TeX Gyre';
    }
</style>
<h2>ViewCart</h2>
<h1>@Html.ValidationSummary(false, "", new { @class = "text-danger" })</h1>

@*********************************************@
@{
    var errorMessage = TempData["ErrorMessage"] as string;
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@*********************************************@


@{
    var errorMessage2 = TempData["ErrorMessage2"] as string;
}

@if (!string.IsNullOrEmpty(errorMessage2))
{
    <div class="alert alert-danger">@errorMessage2</div>
}

@*********************************************@  

@{
    var SuccessMessage = TempData["SuccessMessage"] as string;
}

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}

<table class="table table-striped table-hover MyFont">
    <tr>
        @*<th>
                @Html.DisplayNameFor(model => model.UserID)

            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProductID)
            </th>*@
        <th>
            @Html.DisplayNameFor(model => model.ProductName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.UnitPrice)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Quantity)
        </th>
        <th>
            SubTotal
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            @*<td>
                @Html.DisplayFor(modelItem => item.UserID)*@
            @{
                ProductIDs.Add(int.Parse(item.ProductID.ToString()));
            }
            @*</td>
                <td>
                    @Html.DisplayFor(modelItem => item.ProductID)
                </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.ProductName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UnitPrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
                @{
                    Quants.Add(int.Parse(item.Quantity.ToString()));
                }
            </td>
            <td>
                @{
                    float B = float.Parse(item.Quantity.ToString());
                    float A = float.Parse(item.UnitPrice.ToString());
                    float C = A * B;
                    Total += C;
                }
                @C
            </td>
            <td>
                @Html.ActionLink("Details", "CartDetails", new { id = item.CartID }) |
                @Html.ActionLink("Remove From Cart", "DeleteFromCart", new { id = item.CartID })
            </td>
        </tr>
    }

</table>
<h1 class="MyTotal">Total: @Total<sub>.Egp</sub></h1>



@*@Html.ActionLink("Check", "RemoveFromStock", new { @class = "btn btn-sm btn-danger" })*@

<a href="/Home/RemoveFromStock" class="btn btn-success">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cart-check-fill" viewBox="0 0 16 16">
        <path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-1.646-7.646-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L8 8.293l2.646-2.647a.5.5 0 0 1 .708.708z" />
    </svg> Check
</a>
